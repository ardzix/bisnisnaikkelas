{"swagger": "2.0", "info": {"title": "SSO Service API", "description": "API documentation for the SSO service", "contact": {"email": "your-email@example.com"}, "license": {"name": "BSD License"}, "version": "v1"}, "host": "sso.arnatech.id", "schemes": ["https"], "basePath": "/api/auth", "consumes": ["application/json"], "produces": ["application/json"], "securityDefinitions": {"Bearer": {"type": "apiKey", "name": "Authorization", "in": "header"}}, "security": [{"Bearer": []}], "paths": {"/login/": {"post": {"operationId": "login_create", "description": "Handle MFA-aware login. Prompt for MFA if enabled.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["email", "password"], "type": "object", "properties": {"email": {"description": "User email", "type": "string"}, "password": {"description": "User password", "type": "string"}}}}], "responses": {"200": {"description": "MFA required or JWT tokens returned", "examples": {"application/json": {"mfa_required": true, "message": "MFA is required. Please provide your MFA token."}}}, "400": {"description": "Invalid credentials"}}, "tags": ["login"]}, "parameters": []}, "/logout/": {"post": {"operationId": "logout_create", "description": "Logout user by blacklisting the refresh token.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["refresh"], "type": "object", "properties": {"refresh": {"description": "Refresh token", "type": "string"}}}}], "responses": {"205": {"description": "Logout successful"}, "400": {"description": "Bad Request"}}, "tags": ["logout"]}, "parameters": []}, "/mfa/set/": {"post": {"operationId": "mfa_set_create", "description": "Set up MFA for the user and return the MFA secret and QR code URL.", "parameters": [], "responses": {"200": {"description": "MFA secret and QR code URL returned", "examples": {"application/json": {"mfa_secret": "SECRET_CODE", "qr_code_url": "otpauth://totp/YourApp:testuser@example.com?secret=SECRET_CODE&issuer=YourApp"}}}}, "tags": ["mfa"]}, "parameters": []}, "/mfa/verify/": {"post": {"operationId": "mfa_verify_create", "description": "Verify MFA token and return JWT tokens if successful.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["email", "mfa_token"], "type": "object", "properties": {"email": {"description": "User email", "type": "string"}, "mfa_token": {"description": "MFA token", "type": "string"}}}}], "responses": {"200": {"description": "MFA token verified, JWT tokens returned", "examples": {"application/json": {"refresh": "eyJhbGciOiJIUzI1...", "access": "eyJhbGciOiJIUzI1..."}}}, "400": {"description": "Invalid MFA token or credentials"}, "404": {"description": "User not found"}}, "tags": ["mfa"]}, "parameters": []}, "/register/": {"post": {"operationId": "register_create", "description": "Register a new user.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/User"}}], "responses": {"201": {"description": "User registered successfully", "examples": {"application/json": {"refresh": "eyJhbGciOiJIUzI1...", "access": "eyJhbGciOiJIUzI1..."}}}, "400": {"description": "Bad Request"}}, "tags": ["register"]}, "parameters": []}, "/resend-email-otp/": {"post": {"operationId": "resend-email-otp_create", "description": "Resend OTP to user's email. Can only be done 5 minutes after the last OTP was sent.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["email"], "type": "object", "properties": {"email": {"description": "User email", "type": "string"}}}}], "responses": {"200": {"description": "OTP resent successfully."}, "400": {"description": "Bad Request (e.g., OTP sent too recently, user already verified)"}, "404": {"description": "User not found"}}, "tags": ["resend-email-otp"]}, "parameters": []}, "/token/refresh/": {"post": {"operationId": "token_refresh_create", "description": "Refresh JWT access token using a refresh token.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["refresh"], "type": "object", "properties": {"refresh": {"description": "The refresh token to use", "type": "string"}}}}], "responses": {"200": {"description": "New access token", "examples": {"application/json": {"access": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."}}}, "400": {"description": "Invalid token or token expired"}}, "tags": ["token"]}, "parameters": []}, "/token/verify/": {"post": {"operationId": "token_verify_create", "description": "Takes a token and indicates if it is valid.  This view provides no\ninformation about a token's fitness for a particular use.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"$ref": "#/definitions/TokenVerify"}}], "responses": {"201": {"description": "", "schema": {"$ref": "#/definitions/TokenVerify"}}}, "tags": ["token"]}, "parameters": []}, "/verify-email/": {"post": {"operationId": "verify-email_create", "description": "Verify the email with OTP.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["email", "otp"], "type": "object", "properties": {"email": {"description": "Email address", "type": "string"}, "otp": {"description": "6-digit OTP", "type": "string"}}}}], "responses": {"200": {"description": "Email verified successfully."}, "400": {"description": "Invalid OTP or expired OTP."}, "404": {"description": "User not found."}}, "tags": ["verify-email"]}, "parameters": []}}, "definitions": {"User": {"required": ["email", "password"], "type": "object", "properties": {"email": {"title": "Email", "type": "string", "format": "email", "maxLength": 254, "minLength": 1}, "password": {"title": "Password", "type": "string", "maxLength": 128, "minLength": 1}}}, "TokenVerify": {"required": ["token"], "type": "object", "properties": {"token": {"title": "Token", "type": "string", "minLength": 1}}}}}